{% comment %}
  emit-name-affiliation: emit the name and affiliation from a person's record
    example: "firstname lastname (affiliations)"
    where there might be multiple affiliations

  arguments:
    `person`: record containing the person's information
    `short`: boolean indicating that short affiliation should be use (optional, default: false)
    `noaffil`: boolean indicating that only the name should be emitted (optional, default: false)

  Expected elements of person structure
    lastname (string)
    firstname (string)
    affiliations (array) used if short==false
    short-affils (array) used if short==true

  Notes: 
  * missing elements will be silently ignored

  FIXME: why do we have to specify element 0 here?
{% endcomment %}

{%- assign short = include.short | default: false -%}
{%- assign noaffil = include.noaffil | default: false -%}

{%- comment -%}
  This method of construction is sloppy in that corner cases my result in leading or trailing spaces in the string.
  So we capture it and strip off leading and trailing whitespace before emitting it.
{%- endcomment -%}

{%- capture n -%}
{%- if include.person[0].firstname -%}{{ include.person[0].firstname | append: " " }}{%- endif -%}
{%- if include.person[0].lastname -%}{{ include.person[0].lastname | append: " " }}{%- endif -%}
{%- unless noaffil -%}
  {%- if short -%}
    {%- if include.person[0].short-affils -%}({{- include.person[0].short-affils | array_to_sentence_string }}){%- endif -%}
  {%- else -%}
    {%- if include.person[0].affiliations -%}({{- include.person[0].affiliations | array_to_sentence_string }}){%- endif -%}
  {%- endif -%}
{%- endunless -%}
{%- endcapture -%}
{{ n | strip }}